# main.py
import os
import random
from aiogram import Bot, Dispatcher
from aiohttp import web
import hashlib

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã ===
TOKEN = os.getenv("BOT_TOKEN")
FREEKASSA_SHOP_ID = os.getenv("FREEKASSA_SHOP_ID")
FREEKASSA_SECRET = os.getenv("FREEKASSA_SECRET")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã
if not all([TOKEN, FREEKASSA_SHOP_ID, FREEKASSA_SECRET]):
    raise Exception("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# === –ë–æ—Ç ===
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π JSON –∏–ª–∏ –±–∞–∑—É)
paid_users = set()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message()
async def handle_message(message):
    user_id = message.from_user.id

    if message.text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ /pay, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")

    elif message.text == "/pay":
        amount = 10
        sign = hashlib.md5(f"{FREEKASSA_SHOP_ID}:{amount}:{FREEKASSA_SECRET}:{user_id}".encode()).hexdigest()
        pay_url = (
            f"https://free-kassa.ru/merchant/cash.php?"
            f"m={FREEKASSA_SHOP_ID}&oa={amount}&o={user_id}&s={sign}"
        )
        await message.answer(f"[–û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ]({pay_url})", parse_mode="Markdown")

    elif message.text == "/random":
        if user_id in paid_users:
            number = random.randint(1, 10)
            await message.answer(f"üé≤ –í–∞—à–µ —á–∏—Å–ª–æ: <b>{number}</b>", parse_mode="HTML")
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ: /pay")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç Free-Kassa ===
async def freekassa_handler(request):
    data = await request.post()
    print("FreeKassa data:", dict(data))  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        merchant_id = data.get('MERCHANT_ID')
        amount = data.get('AMOUNT')
        order_id = data.get('MERCHANT_ORDER_ID')
        sign = data.get('SIGN')
        print(f"Received: merchant_id={merchant_id}, amount={amount}, order_id={order_id}, sign={sign}")
        check_sign = hashlib.md5(f"{merchant_id}:{amount}:{FREEKASSA_SECRET}:{order_id}".encode()).hexdigest()
        print(f"Generated sign: {check_sign}")
        if sign.lower() == check_sign.lower():
            user_id = int(order_id)
            paid_users.add(user_id)
            await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–µ–ø–µ—Ä—å /random")
            return web.Response(text="OK")
        else:
            print("Signature mismatch")
            return web.Response(text="SIGN ERROR", status=400)
    except Exception as e:
        print(f"Error in freekassa_handler: {str(e)}")
        return web.Response(text=f"ERROR: {str(e)}", status=500)

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä ===
async def on_startup(app):
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

app = web.Application()
app.on_startup.append(on_startup)
app.router.add_post('/freekassa', freekassa_handler)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    from aiogram import Dispatcher
    from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    webhook_path = '/webhook'
    app.router.add_post(webhook_path, SimpleRequestHandler(dispatcher=dp, bot=bot).handle)

    setup_application(app, dp, bot=bot)

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    web.run_app(app, host='0.0.0.0', port=int(os.getenv('PORT', 8080)))
